/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options {
  // static = true;
  JAVA_UNICODE_ESCAPE = true;
  JDK_VERSION = "1.5";
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
}PARSER_BEGIN(Aplus)package COMPILADOR;

import java.io.*;
import java.util.List;
import java.util.LinkedList;


public class Aplus{

	static Tabela tabela = new Tabela();

 	  public static void main(String args []) throws ParseException  { 
     Aplus ap = null;
      try {
        
         ap = new Aplus(new FileInputStream(args[0]));
         inicioAplus();
		 System.out.println(tabela);
		 

         System.out.println("\nTabela de Simbolos (Variaveis): \n\n"+tabela.toString());

      }
      catch(FileNotFoundException e) {
         System.out.println("Erro: arquivo não encontrado");
      }
      catch(TokenMgrError e) {
         System.out.println("Erro léxico\n" + e.getMessage());
      }	}}
PARSER_END(Aplus)

TOKEN : /* OPERATORS */
{
  < SOMA : "+" >
| < SUBTRACAO : "-" >
| < MULTIPLICACAO : "*" >
| < DIVISAO : "/" >
}
TOKEN [IGNORE_CASE] :  {
	<CONSTANTE_NUMERO: ((["0"-"9"])* (".")? (["0"-"9"])+)  > 
}


TOKEN :
{
	  < CONSTANT : (< DIGITO >)+ >
	| 	<STRING: "string">  
	| 	<INTEGER: "integer" > 
	| 	<PRINT: "print" > 
	| 	<INPUT: "input" > 
	|  	<VAR: "VAR" >
	| 	<VAREXPRE: ["a"-"z"] (["a"-"z"] | ["0"-"9"])+>
	| 	<LETRA: ["a"-"z"] | ["a"-"z"](["a"-"z"]|["A"-"Z"])+ | ["A"-"Z"](["a"-"z"]|["A"-"Z"])+> 
	| 	<DIGITO: ["0"-"9"]  > 
	| 	<POTENCIA: "^" > 
	| 	<VIRGULA: "," > 
	| 	<RESTO_DIVISAO: "%" > 
	| 	<IGUAL: "==" > 
	| 	<ATRIBUICAO: ":" > 
	| 	<ABRE_PARENTESES: "(" > 
	| 	<FECHA_PARENTESES: ")" > 
	| 	<MAIOR: ">" > 
	| 	<MAIOR_IGUAL: " >=" > 
	| 	<MENOR: "<" > 
	| 	<MENOR_IGUAL: ">=" > 
	| 	<CONCATENACAO: "\\" > 
	| 	<QUEBRA_LINHA: "\n" > 
	| 	<TABULACAO: "\t" > 
	| 	<CONSTANTE_TEXTO: "\"" ( ~["\"","\n","\r"])* "\"" > 
	| 	<ENQUANTO: "enquanto" > 
	| 	<SE: "se" > 
	| 	<SENAO: "senao" > 
	| 	<VERDADEIRO: "true" > 
	| 	<FALSE: "false" >
	| 	<THEN: "THEN" >
	| 	<FIMSE: "FIMSE" >
	| 	<FIMENQUANTO: "FIMENQUANTO" >
	| 	<BEGIN: "BEGIN" >
	| 	<END: "END" >
	|   <OR: "OR" >
	| 	<AND: "AND" >
	| 	<NOT: "NOT" >
	| 	<DIFERENTE: "!=" >
	
}

JAVACODE void inicioAplus()

{

   Token t;

   do {

      t = getNextToken();

      System.out.println(tokenImage[t.kind]+"\t"+t.image);

   }

   while(t.kind != EOF);

}


void inicio() : {}
{
	 <BEGIN> BLOCO() <END> <EOF> 
}

void BLOCO(): {}
{
  (DECVARIAVEL())* (COMANDOS())*
}


void DECVARIAVEL() : {Simbolo simb; Token t;char tp; } {
	( <STRING> {tp='s';} | <INTEGER> {tp='n';} )
	listaVar(tp)   
}

void listaVar(char tp) : {Simbolo simb; Token t;} {
	itemListaVar(tp) (itemListaVar(tp) )*
}

void itemListaVar(char tp) : {Simbolo simb; Token t;} {
   t=<VAREXPRE>
   {
     if(tabela.isExistent(t.image)) {
		 System.err.println("Variavel Duplicada");
      }else { 
		  simb = new Simbolo();
		  simb.setNome(t.image);
		  simb.setTipo(tp);
		  tabela.inclui(simb);
		}
   }
   
  
	(<ATRIBUICAO> expression() )?
}


void COMANDOS(): {}
{
  verificar() | loop()  | inserir()| mostrar() | expression()
}

void verificar() : {}
{
	<SE> <ABRE_PARENTESES>expression()<FECHA_PARENTESES> <THEN > (COMANDOS())* (verificarSENAO())? <FIMSE>
}
void verificarSENAO() : {}
{
	<SENAO> (COMANDOS())*
}

void loop() : {}
{
	<ENQUANTO> <ABRE_PARENTESES>expression()<FECHA_PARENTESES>  (COMANDOS())*  <FIMENQUANTO>
}

void inserir(): {}
{
 	<VAREXPRE> <ATRIBUICAO> <INPUT> <ABRE_PARENTESES> ((<CONSTANTE_TEXTO>)? <VAREXPRE>(<VAREXPRE>)*) <FECHA_PARENTESES>
}

void mostrar(): {}
{
  <PRINT> <ABRE_PARENTESES> <CONSTANTE_TEXTO> expression() <FECHA_PARENTESES>
}


void expression() : {} {
	expAuxiliar()

}	

void expAuxiliar() : {} {
	termo()
}	

void termo() : {}
{
	termo1()(<OR> termo1())*	
}

void termo1() : {}
{
	termo2()(<AND> termo2())*

}

void termo2() : {}
{
	 termo3()((<MAIOR> |<MENOR> | <MAIOR_IGUAL> | <MENOR_IGUAL> | <DIFERENTE> | <IGUAL>)termo3())*
}

void  termo3() : {}
{
	termo4()(<SOMA> termo4()|<SUBTRACAO> termo4())*

}

void  termo4() : {}
{

	 termo5()( <MULTIPLICACAO> termo5()| <DIVISAO> termo5())*

}

void  termo5() : {}
{

	termo6()(<POTENCIA> termo5())*  

}
void  termo6() : {}
{

	(<NOT>)* termo7()

}

void termo7() : {}
{
	(<SUBTRACAO> |<SOMA>)? <CONSTANTE_NUMERO>
	|
	 <VAREXPRE>
	| 
	 <CONSTANTE_TEXTO>
	| 
	 <ABRE_PARENTESES> expAuxiliar() <FECHA_PARENTESES>
}
 




/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options {
  // static = true;
  JAVA_UNICODE_ESCAPE = true;
  JDK_VERSION = "1.5";
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
}PARSER_BEGIN(Aplus)package COMPILADOR;

import java.io.*;
import java.util.List;
import java.util.LinkedList;


public class Aplus{

	static Tabela tabela = new Tabela();
	//static List<> listaComando = new LinkedList<>();
 	  public static void main(String args []) throws ParseException  { 
     Aplus ap = null;
      try {
        
         ap = new Aplus(new FileInputStream(args[0]));
         inicioAplus();
		 System.out.println(tabela);
		 

         System.out.println("\nTabela de Simbolos (Variaveis): \n\n"+tabela.toString());

      }
      catch(FileNotFoundException e) {
         System.out.println("Erro: arquivo não encontrado");
      }
      catch(TokenMgrError e) {
         System.out.println("Erro léxico\n" + e.getMessage());
      }	}}
PARSER_END(Aplus)

TOKEN : /* OPERATORS */
{
  < SOMA : "+" >
| < SUBTRACAO : "-" >
| < MULTIPLICACAO : "*" >
| < DIVISAO : "/" >
}
TOKEN [IGNORE_CASE] :  {
	<CONSTANTE_NUMERO: ((["0"-"9"])* (".")? (["0"-"9"])+)  > 
}


TOKEN :
{
	  < CONSTANT : (< DIGITO >)+ >
	| 	<STRING: "string">  
	| 	<INTEGER: "integer" > 
	| 	<PRINT: "print" > 
	| 	<INPUT: "input" > 
	|  	<VAR: "VAR" >
	| 	<VAREXPRE: ["a"-"z"] (["a"-"z"] | ["0"-"9"])+>
	| 	<LETRA: ["a"-"z"] | ["a"-"z"](["a"-"z"]|["A"-"Z"])+ | ["A"-"Z"](["a"-"z"]|["A"-"Z"])+> 
	| 	<DIGITO: ["0"-"9"]  > 
	| 	<POTENCIA: "^" > 
	| 	<VIRGULA: "," > 
	| 	<RESTO_DIVISAO: "%" > 
	| 	<IGUAL: "==" > 
	| 	<ATRIBUICAO: ":" > 
	| 	<ABRE_PARENTESES: "(" > 
	| 	<FECHA_PARENTESES: ")" > 
	| 	<MAIOR: ">" > 
	| 	<MAIOR_IGUAL: " >=" > 
	| 	<MENOR: "<" > 
	| 	<MENOR_IGUAL: ">=" > 
	| 	<CONCATENACAO: "\\" > 
	| 	<QUEBRA_LINHA: "\n" > 
	| 	<TABULACAO: "\t" > 
	| 	<CONSTANTE_TEXTO: "\"" ( ~["\"","\n","\r"])* "\"" > 
	| 	<ENQUANTO: "enquanto" > 
	| 	<SE: "se" > 
	| 	<SENAO: "senao" > 
	| 	<VERDADEIRO: "true" > 
	| 	<FALSE: "false" >
	| 	<THEN: "THEN" >
	| 	<FIMSE: "FIMSE" >
	| 	<FIMENQUANTO: "FIMENQUANTO" >
	| 	<BEGIN: "BEGIN" >
	| 	<END: "END" >
	|   <OR: "OR" >
	| 	<AND: "AND" >
	| 	<NOT: "NOT" >
	| 	<DIFERENTE: "!=" >
	
}

JAVACODE void inicioAplus()

{

   Token t;

   do {

      t = getNextToken();

      System.out.println(tokenImage[t.kind]+"\t"+t.image);

   }

   while(t.kind != EOF);

}


void inicio() : {}
{
	 <BEGIN> BLOCO() <END> <EOF> 
}

void BLOCO(): {}
{
  (DECVARIAVEL())* (COMANDOS())*
}


void DECVARIAVEL() : {Simbolo simb; Token t;char tp; } {
	( <STRING> {tp='s';} | <INTEGER> {tp='n';} )
	listaVar(tp)   
}

void listaVar(char tp) : {Simbolo simb; Token t;} {
	itemListaVar(tp) (itemListaVar(tp) )*
}

void itemListaVar(char tp) : {Simbolo simb; Token t;} {
   t=<VAREXPRE>
   {
     if(tabela.isExistent(t.image)) {
		 System.err.println("Variavel Duplicada");
      }else { 
		  simb = new Simbolo();
		  simb.setNome(t.image);
		  simb.setTipo(tp);
		  tabela.inclui(simb);
		}
   }
   
  
	(<ATRIBUICAO> expression() )?
}


void COMANDOS(): {}
{
  verificar() | loop()  | inserir()| mostrar() | expression()
}

void verificar() : {}
{
	<SE> <ABRE_PARENTESES>expression()<FECHA_PARENTESES> <THEN > (COMANDOS())* (verificarSENAO())? <FIMSE>
}
void verificarSENAO() : {}
{
	<SENAO> (COMANDOS())*
}

void loop() : {}
{
	<ENQUANTO> <ABRE_PARENTESES>expression()<FECHA_PARENTESES>  (COMANDOS())*  <FIMENQUANTO>
}

void inserir(): {}
{
 	<VAREXPRE> <ATRIBUICAO> <INPUT> <ABRE_PARENTESES> ((<CONSTANTE_TEXTO>)? <VAREXPRE>(<VAREXPRE>)*) <FECHA_PARENTESES>
}

void mostrar(): {}
{
  <PRINT> <ABRE_PARENTESES> <CONSTANTE_TEXTO> expression() <FECHA_PARENTESES>
}


void expression() : { Expressao listaExp = new Expressao();} {
	expAuxiliar(listaExp) {
	  //return listaExp;
	  }

}	

void expAuxiliar(Expressao listaExp) : {Token t;Item item;} {
	termo(listaExp)
}	

void termo(Expressao listaExp) : {Token t;Item item;}
{
		termo1(listaExp) 
	(
		 t=<OR> termo1(listaExp)
		 {
		 	item = new Item('o', t.image);
		 	listaExp.inclui(item);
		 }
    )*	
}

void termo1(Expressao listaExp) : {Token t; Item item; }
{

		termo2(listaExp) 
	( 
		t=<AND> termo2(listaExp)
		{
			item = new Item('o', t.image);
		 	listaExp.inclui(item);
		}
	)*

}

void termo2(Expressao listaExp) : {Token t; Item item; }
{


	 termo3(listaExp) 
	 ( 
	 	(t=<MAIOR> | t=<MENOR> | t=<MAIOR_IGUAL> | t=<MENOR_IGUAL> | t=<DIFERENTE> | t=<IGUAL>) 
	     termo3(listaExp)
	 	{
	 		item = new Item('o', t.image);
		 	listaExp.inclui(item);
	 	}
	 )*

	 
}

void  termo3(Expressao listaExp) : {Token t; Item item; }
{

	termo4(listaExp) 
	( 
		t=<SOMA> termo4(listaExp)
		{
			if(!listaExp.otimizaExpressao('+') && !listaExp.otimizaString()){
				item = new Item('o', t.image);
				listaExp.inclui(item);	
			}
		}	
		
		| 
		
		t=<SUBTRACAO> termo4(listaExp)
		{
			if(!listaExp.otimizaExpressao('-')){
				item = new Item('o', t.image);
				listaExp.inclui(item);	
			}
    		
		}
	)*


}

void  termo4(Expressao listaExp) : {Token t; Item item;}
{

	 	 termo5(listaExp) 
	(
		 
		  t=<MULTIPLICACAO> termo5(listaExp)
		  {
		  	if(!listaExp.otimizaExpressao('*')){
				item = new Item('o', t.image);
				listaExp.inclui(item);	
			}
		  }
		   
		 |
		 
		  t=<DIVISAO> termo5(listaExp)
		 {
		 	if(!listaExp.otimizaExpressao('/')){
				item = new Item('o', t.image);
				listaExp.inclui(item);	
			}
		 }
	)*

}

void  termo5(Expressao listaExp) : {Token t; Item item;}
{


		termo6(listaExp) 
	( 
		t=<POTENCIA> termo5(listaExp) //Forma que encontrei para ser avaliado da direita para esquerda 
		{
			if(!listaExp.otimizaExpressao('^')){
				item = new Item('o', t.image);
				listaExp.inclui(item);	
			}	
		}
	)*  

}
void  termo6(Expressao listaExp) : {Token t=null; Item item; int cont_OP_NOT=0;}
{

	//(<NOT>)* termo7(listaExp)

		( t=<NOT> {cont_OP_NOT++;})* termo7(listaExp)
	{// Se não tiver nenhum operador not não tem nehum operador a armazenar
		if(t != null && (cont_OP_NOT % 2 != 0)){
			item = new Item('o', t.image);
			listaExp.inclui(item);
		}	
	}

}

void termo7(Expressao listaExp) : {Token t, t_aux=null; Item item; String num;}
{
  /*
	(<SUBTRACAO> |<SOMA>)? <CONSTANTE_NUMERO>
	|
	 <VAREXPRE>
	| 
	 <CONSTANTE_TEXTO>
	| 
	 <ABRE_PARENTESES> expAuxiliar(listaExp) <FECHA_PARENTESES>*/


	  (t_aux=<SUBTRACAO> | t_aux=<SOMA>)? t=<CONSTANTE_NUMERO>
	  {
	  	if(t_aux != null)
	  		num = t_aux.image + t.image;
	  	else	
	  		num = t.image;
	    item = new Item('n', num);
        listaExp.inclui(item);
	  }
	  
	  
	|
	
	 t=<VAREXPRE>
	  {
		if(!tabela.isExistent(t.image))
			System.err.println("ERRO!\n Erro Semantico: A váriavel \"" + t.image + "\" não foi declarada\n");
	  }
	  {
	  	if(!tabela.foiInicializado(t.image))
	  		System.err.println("ERRO!\n Erro Semantico: A váriavel \"" + t.image + "\" não foi inicializada\n");
	  }
	  {
		item = new Item('v', t.image);
       	listaExp.inclui(item);	
      }	 
      
	| 
	
	 t=<CONSTANTE_TEXTO>
	 {
		item = new Item('s', t.image);
       	listaExp.inclui(item);	
	 }
	 
	| 
	 <ABRE_PARENTESES> expAuxiliar(listaExp) <FECHA_PARENTESES>
	 
}
 




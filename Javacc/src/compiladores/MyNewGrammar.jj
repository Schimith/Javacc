/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(MyNewGrammar)
package compiladores;

public class MyNewGrammar
{
  public static void main(String args []) throws ParseException
  {
    MyNewGrammar parser = new MyNewGrammar(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");
      try
      {
        switch (MyNewGrammar.one_line())
        {
          case 0 : 
          System.out.println("OK.");
          break;
          case 1 : 
          System.out.println("Goodbye.");
          break;
          default : 
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        MyNewGrammar.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(MyNewGrammar)
/*
SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}
*/


TOKEN : /* OPERATORS */
{
  < SOMA : "+" >
| < SUBTRACAO : "-" >
| < MULTIPLICACAO : "*" >
| < DIVISAO : "/" >
}

TOKEN :
{
  < CONSTANT : (< DIGITO >)+ >
| 	<STRING: "texto">  
| 	<INTEGER: "integer" > 
| 	<PRINT: "print" > 
| 	<INPUT: "input" > 
|  	<VAR: <LETRA> (<LETRA>|<DIGITO>)* > 
| 	<LETRA: ["a"-"z"] | ["a"-"z"](["a"-"z"]|["A"-"Z"])+ | ["A"-"Z"](["a"-"z"]|["A"-"Z"])+> 
| 	<DIGITO: ["0"-"9"]  > 
| 	<POTENCIA: "^" > 
| 	<VIRGULA: "," > 
| 	<RESTO_DIVISAO: "%" > 
| 	<IGUAL: "==" > 
| 	<ATRIBUICAO: ":" > 
| 	<ABRE_PARENTESES: "(" > 
| 	<FECHA_PARENTESES: ")" > 
| 	<MAIOR: ">" > 
| 	<MAIOR_IGUAL: " >=" > 
| 	<MENOR: "<" > 
| 	<MENOR_IGUAL: ">=" > 
| 	<CONCATENACAO: "\\" > 
| 	<QUEBRA_LINHA: "\n" > 
| 	<TABULACAO: "\t" > 
| 	<CONSTANTE_TEXTO: "\"" ( ~["\"","\n","\r"])* "\"" > 
| 	<CONSTANTE_NUMERO: (["0"-"9"])  > 
| 	<WHILE: "while" > 
| 	<IF: "if" > 
| 	<ELSE: "else" > 
| 	<VERDADEIRO: "true" > 
| 	<FALSE: "false" > 

}

int one_line() :
{}
{
  sum() ";"
  {
    return 0;
  }
| ";"
  {
    return 1;
  }
}

void sum() :
{}
{
  term()
  (
    (
      < SOMA >
    | < SUBTRACAO >
    )
    term()
  )*
}

void term() :
{}
{
  unary()
  (
    (
      < MULTIPLICACAO >
    | < DIVISAO >
    )
    unary()
  )*
}

void unary() :
{}
{
  < SUBTRACAO > element()
| element()
}

void element() :
{}
{
  < CONSTANT >
| "(" sum() ")"
}
